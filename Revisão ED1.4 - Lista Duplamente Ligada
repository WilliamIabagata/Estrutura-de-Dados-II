/*
O código apresenta uma lista duplamente ligada com operações básicas para inserir, deletar e imprimir.

1 - comente o código.
2 - Modifique a operação de inserção de dados, para que o usuário seja capaz de inserir valores para a lista.
3 - Faça uma operação de buscar por um valor específico, informado pelo usuário, onde o programa deve apresentar se o valor foi encontrado e, em caso afirmativo, exibir detalhes(vizinhos) do nó correspondente.
*/

#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node* next;
    struct Node* prev;
} Node;

Node* head = NULL;

void insertFront() {
    int valor;
    scanf("%d", &valor);
    
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = valor;
    newNode->next = head;
    newNode->prev = NULL;
    if (head != NULL)
        head->prev = newNode;
    head = newNode;
}

void deleteNode(Node* node) {
    if (node == head)
        head = node->next;
    if (node->next != NULL)
        node->next->prev = node->prev;
    if (node->prev != NULL)
        node->prev->next = node->next;
    free(node);
}

void printList() {
    Node* temp = head;
    while (temp != NULL) {
        printf("%d ", temp->data);
        temp = temp->next;
    }
    printf("\n");
}

void buscarValor(int valor){
    Node* temporario = head;
    int encontrar = 0;
    
    while(temporario != NULL){
        if(valor == temporario -> data){
            printf("Valor presente na Lista. Seus vizinhos são: ");
            
            if(temporario -> prev != NULL){
                printf("%d e ", temporario -> prev -> data);
            }
            
            if(temporario -> next != NULL){
                printf("%d\n", temporario -> next -> data);
            }
            
            encontrar = 1;
            break;
        }
        
        temporario = temporario -> next;
    }
    
    if(encontrar == 0){
        printf("O valor solicitado não está presente na lista.\n");
    }
}

int main() {
    insertFront();
    insertFront();
    insertFront();
    insertFront();
    insertFront();
    buscarValor(10);
    return 0;
}
